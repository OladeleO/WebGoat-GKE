# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#Environnement variable
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}    # Add your cluster name here.
  GKE_ZONE: europe-west1-b   # Add your cluster zone here.
  DEPLOYMENT_NAME: owasp-webgoat-webwolf-gke # Add your deployment name here.
  IMAGE: owasp-webgoat-webwolf
  TAG: latest
  
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

# Terraform job will run terraform and create the infra needed for the deployment. It will create a cluster with the good parameters
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 
        
    #- name: Terraform Format
     # run: terraform fmt -check
      
    - name: Terraform plan
      run: terraform plan
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 
        
    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 

  
  deploy-to-gke:
    # This part of the code will pull the docker image in GCR and it will deploy it in a GKE cluster
      needs: [terraform]
      if: always()
      name: Pull docker image and deploy Docker image to GKE cluster
      runs-on: ubuntu-latest
      steps:

      - name: Checkout
        uses: actions/checkout@v2

     # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.DOCKER_PASSWORD }}
          project_id: ${{ secrets.GKE_PROJECT }} 

     # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |-
          gcloud --quiet auth configure-docker
     # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SA_KEY }} 

    # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl --location https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.2.0/kustomize_v4.2.0_linux_amd64.tar.gz | tar xz
          chmod u+x ./kustomize
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
